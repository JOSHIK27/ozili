
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."create_fabric_view"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    CREATE OR REPLACE VIEW fabric_quantity_view AS
    SELECT fabric, quantity
    FROM whitestocktbl;
    RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."create_fabric_view"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."f1"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$begin
  create or replace view
    fabric_subfabric_view as
  select
    fabric,
    subfabric
  from
    public.whitestocktbl;
  return new;
end;$$;

ALTER FUNCTION "public"."f1"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."f2"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  create or replace view
    njr as
  select
    fabric,
    subfabric
  from
    whitestocktbl;
  return new;
end;$$;

ALTER FUNCTION "public"."f2"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."meters"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  create or replace view
  metersview as
  select subfabric, sum(quantity) from whitestocktbl where units = 'Meters' group by subfabric;
  return new;
end;$$;

ALTER FUNCTION "public"."meters"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."pieces"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  create or replace view
    piece_components as
  select subfabric, sum(quantity) as quantity from whitestocktbl where units = 'Pieces' group by subfabric;
  return new;
end;$$;

ALTER FUNCTION "public"."pieces"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."update_fabric_quantity"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
begin
  create or replace view
    fabric_quantity_view as
  select
    fabric,
    quantity
  from
    whitestocktbl;
end;
$$;

ALTER FUNCTION "public"."update_fabric_quantity"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."whiteasmeters_f"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
CREATE OR REPLACE VIEW whiteasmeters_view AS
SELECT
  subfabric,
  SUM(whiteasmeters) AS whiteasmeters
FROM (
  SELECT
    w.subfabric,
    SUM(w.quantity) AS whiteasmeters
  FROM
    whitestocktbl w
  WHERE
    w.units = 'Meters'
  GROUP BY
    w.subfabric

  UNION ALL

  SELECT
    c.subfabric,
    -SUM(c.meters) AS whiteasmeters
  FROM
    cuttbl c
  GROUP BY
    c.subfabric
) AS combined_data
GROUP BY
  subfabric;
  return new;
end;$$;

ALTER FUNCTION "public"."whiteasmeters_f"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."componentstbl" (
    "component" "text" NOT NULL,
    "compcategory" "text",
    "metersperpiece" double precision,
    "subfabric" "text",
    "fabric" "text"
);

ALTER TABLE "public"."componentstbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."cutstocktbl" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "fabric" "text",
    "subfabric" "text",
    "component" "text",
    "quantitycut" double precision,
    "compquantity" double precision,
    "cutby" "text",
    "date" "date",
    "wastage" double precision
);

ALTER TABLE "public"."cutstocktbl" OWNER TO "postgres";

ALTER TABLE "public"."cutstocktbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."cuttbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."dyechargestbl" (
    "id" bigint NOT NULL,
    "startdate" "date",
    "dyetype" "text",
    "rate" bigint,
    "enddate" "date",
    "timestamp" timestamp with time zone DEFAULT "now"()
);

ALTER TABLE "public"."dyechargestbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."dyetbl" (
    "transaction" "text",
    "date" "date",
    "primarydyer" "text",
    "secondarydyer" "text",
    "fabric" "text",
    "product" "text",
    "dyetype" "text",
    "dyestyle" "text",
    "quantity" bigint,
    "colorcombination" "text",
    "id" bigint NOT NULL
);

ALTER TABLE "public"."dyetbl" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."dyecharges_view" AS
 SELECT ("to_char"(("dy"."date")::timestamp with time zone, 'YYYY-MM-DD'::"text"))::"date" AS "transaction_date",
    "dy"."primarydyer",
    "dy"."dyetype",
    "dy"."quantity",
    "dc"."rate",
    ("dy"."quantity" * "dc"."rate") AS "total_charges"
   FROM ("public"."dyetbl" "dy"
     JOIN "public"."dyechargestbl" "dc" ON ((("dy"."dyetype" = "dc"."dyetype") AND (("dy"."date" >= "dc"."startdate") AND ("dy"."date" <= "dc"."enddate")))))
  WHERE ("dy"."transaction" = 'Regular'::"text");

ALTER TABLE "public"."dyecharges_view" OWNER TO "postgres";

ALTER TABLE "public"."dyechargestbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dyechargestbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."dyestyletbl" (
    "dyestyle" "text" NOT NULL
);

ALTER TABLE "public"."dyestyletbl" OWNER TO "postgres";

ALTER TABLE "public"."dyetbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dyetbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."dyetypestbl" (
    "dyetype" "text" NOT NULL,
    "dyetbl" boolean,
    "printtbl" boolean,
    "jobworktbl" boolean
);

ALTER TABLE "public"."dyetypestbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."fabrictbl" (
    "fabric" "text" NOT NULL
);

ALTER TABLE "public"."fabrictbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."jobworktbl" (
    "date" "date",
    "supplier" "text",
    "printtype" "text",
    "dyetype" "text",
    "movement" "text",
    "fabric" "text",
    "product" "text",
    "quantity" integer,
    "timestamp" timestamp with time zone DEFAULT "now"(),
    "id" bigint NOT NULL,
    "rollingrequired" boolean,
    "transaction" "text",
    "cargoprovider" "text",
    "cargocharges" double precision,
    "additionalcharges" double precision,
    "cpubt" double precision,
    "cpuat" double precision,
    "gstpaid" boolean,
    "gstrate" double precision,
    "netcost" double precision,
    "payabletosupplier" double precision,
    "totalcost" double precision,
    "targetdate" "date",
    "cargopaidbysupplier" boolean
);

ALTER TABLE "public"."jobworktbl" OWNER TO "postgres";

ALTER TABLE "public"."jobworktbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."jobworktbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."printtbl" (
    "date" "date",
    "mainprinter" "text",
    "secprinter" "text",
    "product" "text",
    "dyetype" "text",
    "printtype" "text",
    "quantity" bigint,
    "timestamp" timestamp with time zone DEFAULT "now"(),
    "rollingrequired" boolean,
    "id" bigint NOT NULL,
    "transaction" "text",
    "fabric" "text"
);

ALTER TABLE "public"."printtbl" OWNER TO "postgres";

ALTER TABLE "public"."printtbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."printtbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."printtypestbl" (
    "printtype" "text" NOT NULL,
    "printtbl" boolean,
    "jobworktbl" boolean,
    "rollingtbl" boolean
);

ALTER TABLE "public"."printtypestbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."productComponents" (
    "fabric" "text" NOT NULL,
    "subFabric" "text" NOT NULL,
    "productComponent" "text" NOT NULL,
    "productComponentCategory" "text" NOT NULL,
    "type" "text" NOT NULL
);

ALTER TABLE "public"."productComponents" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."products" (
    "product" "text" NOT NULL,
    "component1" "text" NOT NULL,
    "component2" "text",
    "component3" "text",
    "fabric" "text",
    "productcategory" "text"
);

ALTER TABLE "public"."products" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."rollingtbl" (
    "date" "date",
    "supplier" "text",
    "rolltype" "text",
    "movement" "text",
    "printtype" "text",
    "fabric" "text",
    "quantity" double precision,
    "transportcharges" double precision,
    "timestamp" timestamp without time zone,
    "id" bigint NOT NULL,
    "transaction" "text",
    "product" "text"
);

ALTER TABLE "public"."rollingtbl" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."readystock_view" AS
 SELECT "subquery"."product",
    "sum"("subquery"."Shibori") AS "Shibori",
    "sum"("subquery"."Pathaka") AS "Pathaka",
    "sum"("subquery"."Block Batik") AS "Block Batik",
    "sum"("subquery"."Pen Batik") AS "Pen Batik",
    "sum"("subquery"."Acid Block Print") AS "Acid Block Print",
    "sum"("subquery"."Brush Acid") AS "Brush Acid",
    "sum"("subquery"."Hand Paint") AS "Hand Paint",
    "sum"("subquery"."Ajrakh") AS "Ajrakh",
    "sum"("subquery"."Bagru") AS "Bagru",
    "sum"("subquery"."Bhandej") AS "Bhandej",
    "sum"("subquery"."Kalamkari") AS "Kalamkari",
    "sum"("subquery"."Acid Paint") AS "Acid Paint",
    "sum"("subquery"."Digital") AS "Digital",
    "sum"("subquery"."Dabu") AS "Dabu",
    "sum"("subquery"."Discharge") AS "Discharge",
    "sum"("subquery"."Rapid") AS "Rapid",
    "sum"("subquery"."Pigment") AS "Pigment",
    "sum"("subquery"."Screen Blend") AS "Screen Blend",
    "sum"(((((((((((((((((("subquery"."Shibori" + "subquery"."Pathaka") + "subquery"."Block Batik") + "subquery"."Pen Batik") + "subquery"."Acid Block Print") + "subquery"."Brush Acid") + "subquery"."Hand Paint") + "subquery"."Ajrakh") + "subquery"."Bagru") + "subquery"."Bhandej") + "subquery"."Kalamkari") + "subquery"."Acid Paint") + "subquery"."Digital") + "subquery"."Dabu") + "subquery"."Discharge") + "subquery"."Rapid") + "subquery"."Pigment") + "subquery"."Screen Blend")) AS "total"
   FROM ( SELECT "printtbl"."product",
            0 AS "Shibori",
            0 AS "Pathaka",
            0 AS "Block Batik",
            0 AS "Pen Batik",
            0 AS "Acid Block Print",
            0 AS "Brush Acid",
            0 AS "Hand Paint",
            0 AS "Ajrakh",
            0 AS "Bagru",
            0 AS "Bhandej",
            0 AS "Kalamkari",
            0 AS "Acid Paint",
            0 AS "Digital",
            0 AS "Dabu",
            0 AS "Discharge",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Rapid'::"text") AND ("printtbl"."rollingrequired" = false)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Rapid",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Pigment'::"text") AND ("printtbl"."rollingrequired" = false)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Pigment",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Screen Blend'::"text") AND ("printtbl"."rollingrequired" = false)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Screen Blend"
           FROM "public"."printtbl"
          GROUP BY "printtbl"."product"
        UNION
         SELECT "jobworktbl"."product",
            0 AS "Shibori",
            0 AS "Pathaka",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Block Batik'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Block Batik",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Pen Batik'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Pen Batik",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Acid Block Print'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Acid Block Print",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Brush Acid'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Brush Acid",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Hand Paint'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Hand Paint",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Ajrakh'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Ajrakh",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Bagru'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Bagru",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Bhandej'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Bhandej",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Kalamkari'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Kalamkari",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Acid Paint'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Acid Paint",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Digital'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Digital",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Dabu'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Dabu",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Discharge'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = false)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Discharge",
            0 AS "Rapid",
            0 AS "Pigment",
            0 AS "Screen Blend"
           FROM "public"."jobworktbl"
          GROUP BY "jobworktbl"."product"
        UNION
         SELECT "r"."product",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Shibori'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Shibori",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pathaka'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Pathaka",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Block Batik'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Block Batik",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pen Batik'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Pen Batik",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Acid Block Print'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Acid Block Print",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Brush Acid'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Brush Acid",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Hand Paint'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Hand Paint",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Ajrakh'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Ajrakh",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Bagru'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Bagru",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Bhandej'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Bhandej",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Kalamkari'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Kalamkari",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Acid Paint'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Acid Paint",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Digital'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Digital",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Dabu'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Dabu",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Discharge'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Discharge",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Rapid'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Rapid",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pigment'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Pigment",
            "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Screen Blend'::"text") AND ("r"."movement" = 'In'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END) AS "Screen Blend"
           FROM "public"."rollingtbl" "r"
          GROUP BY "r"."product") "subquery"
  GROUP BY "subquery"."product";

ALTER TABLE "public"."readystock_view" OWNER TO "postgres";

ALTER TABLE "public"."rollingtbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."rollingtbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."screenblendtoprint_view" AS
 SELECT "subquery"."product",
    "sum"("subquery"."2_Colors") AS "2_Colors",
    "sum"("subquery"."3_Colors") AS "3_Colors",
    "sum"("subquery"."Shaded") AS "Shaded",
    "sum"("subquery"."Plain") AS "Plain",
    "sum"(((("subquery"."2_Colors" + "subquery"."3_Colors") + "subquery"."Shaded") + "subquery"."Plain")) AS "Total"
   FROM ( SELECT "jobworktbl"."product",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."dyetype" = '2_Colors'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."printtype" = 'Screen Blend'::"text")) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "2_Colors",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."dyetype" = '3_Colors'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."printtype" = 'Screen Blend'::"text")) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "3_Colors",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."dyetype" = 'Shaded'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."printtype" = 'Screen Blend'::"text")) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Shaded",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."dyetype" = 'Plain'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."printtype" = 'Screen Blend'::"text")) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Plain"
           FROM "public"."jobworktbl"
          GROUP BY "jobworktbl"."product"
        UNION
         SELECT "p"."product",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = '2 Colors'::"text") AND ("p"."printtype" = 'Screen Blend'::"text") AND ("p"."transaction" = 'Regular'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "2_Colors",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = '3_Colors'::"text") AND ("p"."printtype" = 'Screen Blend'::"text") AND ("p"."transaction" = 'Regular'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "3_Colors",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = 'Shaded'::"text") AND ("p"."printtype" = 'Screen Blend'::"text") AND ("p"."transaction" = 'Regular'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "Shaded",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = 'Plain'::"text") AND ("p"."printtype" = 'Screen Blend'::"text") AND ("p"."transaction" = 'Regular'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "Plain"
           FROM "public"."printtbl" "p"
          GROUP BY "p"."product") "subquery"
  GROUP BY "subquery"."product";

ALTER TABLE "public"."screenblendtoprint_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stillinjbbysupplier_view" AS
 SELECT "jobworktbl"."supplier",
    "jobworktbl"."product",
    ("sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = '2_Colors'::"text") AND ("jobworktbl"."movement" = 'Out'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END) - "sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = '2_Colors'::"text") AND ("jobworktbl"."movement" = 'In'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END)) AS "2_Colors",
    ("sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = '3_Colors'::"text") AND ("jobworktbl"."movement" = 'Out'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END) - "sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = '3_Colors'::"text") AND ("jobworktbl"."movement" = 'In'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END)) AS "3_Colors",
    ("sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'Shaded'::"text") AND ("jobworktbl"."movement" = 'Out'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END) - "sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'Shaded'::"text") AND ("jobworktbl"."movement" = 'In'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END)) AS "Shaded",
    ("sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'Plain'::"text") AND ("jobworktbl"."movement" = 'Out'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END) - "sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'Plain'::"text") AND ("jobworktbl"."movement" = 'In'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END)) AS "Plain",
    ("sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'White'::"text") AND ("jobworktbl"."movement" = 'Out'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END) - "sum"(
        CASE
            WHEN (("jobworktbl"."dyetype" = 'White'::"text") AND ("jobworktbl"."movement" = 'In'::"text")) THEN "jobworktbl"."quantity"
            ELSE 0
        END)) AS "White"
   FROM "public"."jobworktbl"
  GROUP BY "jobworktbl"."supplier", "jobworktbl"."product";

ALTER TABLE "public"."stillinjbbysupplier_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stillinroll_view" AS
 SELECT "r"."supplier",
    "r"."product",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Block Batik'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Block Batik'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Block Batik",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Pen Batik'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Pen Batik'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Pen Batik",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Acid Block Print'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Acid Block Print'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Acid Block Print",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Brush Acid'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Brush Acid'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Brush Acid",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Hand Paint'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Hand Paint'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Hand Paint",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Ajrakh'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Ajrakh'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Ajrakh",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Bagru'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Bagru'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Bagru",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Bhandej'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Bhandej'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Bhandej",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Kalamkari'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Kalamkari'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Kalamkari",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Acid Paint'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Acid Paint'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Acid Paint",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Digital'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Digital'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Digital",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Dabu'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Dabu'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Dabu",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Discharge'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Discharge'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Discharge",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Rapid'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Rapid'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Rapid",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Pigment'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Pigment'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Pigment",
    ("sum"(
        CASE
            WHEN (("r"."printtype" = 'Screen Blend'::"text") AND ("r"."movement" = 'Out'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END) - "sum"(
        CASE
            WHEN (("r"."printtype" = 'Screen Blend'::"text") AND ("r"."movement" = 'In'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
            ELSE (0)::double precision
        END)) AS "Screen Blend"
   FROM "public"."rollingtbl" "r"
  GROUP BY "r"."supplier", "r"."product";

ALTER TABLE "public"."stillinroll_view" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."whitestocktbl" (
    "id" bigint NOT NULL,
    "timestamp" timestamp with time zone DEFAULT "now"() NOT NULL,
    "orderdate" "date",
    "receiveddate" "date",
    "invoicenumber" "text",
    "supplier" "text",
    "fabric" "text",
    "subfabric" "text",
    "units" "text",
    "quantity" double precision,
    "cargoprovider" "text",
    "cargocharges" bigint,
    "freeshipping" boolean,
    "gstpaid" boolean,
    "gstrate" double precision,
    "additionalcharges" double precision,
    "cpubt" double precision,
    "cpuat" double precision,
    "netcost" double precision,
    "totalcost" double precision,
    "cargopaidbysupplier" boolean,
    "payabletosupplier" double precision
);

ALTER TABLE "public"."whitestocktbl" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stilltocut_view" AS
 SELECT "combined_data"."subfabric",
    COALESCE("sum"("combined_data"."whitestock"), (0)::double precision) AS "whitestock",
    COALESCE("sum"("combined_data"."alreadycut"), (0)::double precision) AS "alreadycut",
    "sum"(("combined_data"."whitestock" - "combined_data"."alreadycut")) AS "stilltocut"
   FROM ( SELECT "w"."subfabric",
            "sum"("w"."quantity") AS "whitestock",
            0 AS "alreadycut"
           FROM "public"."whitestocktbl" "w"
          WHERE ("w"."units" = 'Meters'::"text")
          GROUP BY "w"."subfabric"
        UNION ALL
         SELECT "c"."subfabric",
            0 AS "whitestock",
            ("sum"("c"."quantitycut") + "sum"("c"."wastage")) AS "alreadycut"
           FROM "public"."cutstocktbl" "c"
          GROUP BY "c"."subfabric") "combined_data"
  GROUP BY "combined_data"."subfabric";

ALTER TABLE "public"."stilltocut_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stilltodye_view" AS
 WITH "componentavailability" AS (
         SELECT "ct"."component",
            COALESCE("sum"(
                CASE
                    WHEN ("w"."units" = 'Meters'::"text") THEN "w"."quantity"
                    ELSE "c"."compquantity"
                END), (0)::double precision) AS "rawstock"
           FROM (("public"."componentstbl" "ct"
             LEFT JOIN "public"."whitestocktbl" "w" ON ((("ct"."component" = "w"."subfabric") AND ("w"."units" = 'Meters'::"text"))))
             LEFT JOIN "public"."cutstocktbl" "c" ON (("ct"."component" = "c"."component")))
          GROUP BY "ct"."component"
        ), "componentdyed" AS (
         SELECT "ct"."component",
            COALESCE("sum"("d"."quantity"), (0)::numeric) AS "rawdyed"
           FROM (("public"."componentstbl" "ct"
             LEFT JOIN "public"."products" "p" ON ((("ct"."component" = "p"."component1") OR ("ct"."component" = "p"."component2") OR ("ct"."component" = "p"."component3"))))
             LEFT JOIN "public"."dyetbl" "d" ON ((("d"."product" = "p"."product") AND ("d"."transaction" = 'Regular'::"text"))))
          GROUP BY "ct"."component"
        ), "componentjobwork" AS (
         SELECT "ct"."component",
            COALESCE("sum"("j"."quantity"), (0)::bigint) AS "rawsentforjb"
           FROM (("public"."componentstbl" "ct"
             LEFT JOIN "public"."products" "p" ON ((("ct"."component" = "p"."component1") OR ("ct"."component" = "p"."component2") OR ("ct"."component" = "p"."component3"))))
             LEFT JOIN "public"."jobworktbl" "j" ON ((("j"."product" = "p"."product") AND ("j"."dyetype" = 'White'::"text") AND ("j"."movement" = 'Out'::"text") AND ("j"."transaction" = 'Regular'::"text"))))
          GROUP BY "ct"."component"
        )
 SELECT "ca"."component",
    "ca"."rawstock",
    "cd"."rawdyed",
    "cjw"."rawsentforjb",
    (("ca"."rawstock" - ("cd"."rawdyed")::double precision) - ("cjw"."rawsentforjb")::double precision) AS "rawinstock"
   FROM (("componentavailability" "ca"
     LEFT JOIN "componentdyed" "cd" ON (("ca"."component" = "cd"."component")))
     LEFT JOIN "componentjobwork" "cjw" ON (("ca"."component" = "cjw"."component")))
  ORDER BY "ca"."rawstock" DESC;

ALTER TABLE "public"."stilltodye_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stilltoprint_view" AS
 SELECT "subquery"."product",
    "sum"("subquery"."2_Colors") AS "2_Colors",
    "sum"("subquery"."3_Colors") AS "3_Colors",
    "sum"("subquery"."Shaded") AS "Shaded",
    "sum"("subquery"."Plain") AS "Plain",
    "sum"(((("subquery"."2_Colors" + "subquery"."3_Colors") + "subquery"."Shaded") + "subquery"."Plain")) AS "Total"
   FROM ( SELECT "dyetbl"."product",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = '2_Colors'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "2_Colors",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = '3_Colors'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "3_Colors",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = 'Shaded'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Shaded",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = 'Plain'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Plain"
           FROM "public"."dyetbl"
          GROUP BY "dyetbl"."product"
        UNION
         SELECT "p"."product",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = '2_Colors'::"text") AND ("p"."transaction" = 'Regular'::"text") AND ("p"."printtype" <> 'Screen Blend'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "2_Colors",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = '3_Colors'::"text") AND ("p"."transaction" = 'Regular'::"text") AND ("p"."printtype" <> 'Screen Blend'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "3_Colors",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = 'Shaded'::"text") AND ("p"."transaction" = 'Regular'::"text") AND ("p"."printtype" <> 'Screen Blend'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "Shaded",
            (- COALESCE("sum"(
                CASE
                    WHEN (("p"."dyetype" = 'Plain'::"text") AND ("p"."transaction" = 'Regular'::"text") AND ("p"."printtype" <> 'Screen Blend'::"text")) THEN "p"."quantity"
                    ELSE (0)::bigint
                END), (0)::numeric)) AS "Plain"
           FROM "public"."printtbl" "p"
          GROUP BY "p"."product"
        UNION
         SELECT "j"."product",
            (- "sum"(
                CASE
                    WHEN (("j"."dyetype" = '2_Colors'::"text") AND ("j"."movement" = 'Out'::"text") AND ("j"."printtype" = 'Screen Blend'::"text") AND ("j"."transaction" = 'Regular'::"text")) THEN "j"."quantity"
                    ELSE 0
                END)) AS "2_Colors",
            (- "sum"(
                CASE
                    WHEN (("j"."dyetype" = '3_Colors'::"text") AND ("j"."movement" = 'Out'::"text") AND ("j"."printtype" = 'Screen Blend'::"text") AND ("j"."transaction" = 'Regular'::"text")) THEN "j"."quantity"
                    ELSE 0
                END)) AS "3_Colors",
            (- "sum"(
                CASE
                    WHEN (("j"."dyetype" = 'Shaded'::"text") AND ("j"."movement" = 'Out'::"text") AND ("j"."printtype" = 'Screen Blend'::"text") AND ("j"."transaction" = 'Regular'::"text")) THEN "j"."quantity"
                    ELSE 0
                END)) AS "Shaded",
            (- "sum"(
                CASE
                    WHEN (("j"."dyetype" = 'Plain'::"text") AND ("j"."movement" = 'Out'::"text") AND ("j"."printtype" = 'Screen Blend'::"text") AND ("j"."transaction" = 'Regular'::"text")) THEN "j"."quantity"
                    ELSE 0
                END)) AS "Plain"
           FROM "public"."jobworktbl" "j"
          GROUP BY "j"."product") "subquery"
  GROUP BY "subquery"."product";

ALTER TABLE "public"."stilltoprint_view" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."stilltoroll_view" AS
 SELECT "subquery"."product",
    "sum"("subquery"."Shibori") AS "Shibori",
    "sum"("subquery"."Pathaka") AS "Pathaka",
    "sum"("subquery"."Block Batik") AS "Block Batik",
    "sum"("subquery"."Pen Batik") AS "Pen Batik",
    "sum"("subquery"."Acid Block Print") AS "Acid Block Print",
    "sum"("subquery"."Brush Acid") AS "Brush Acid",
    "sum"("subquery"."Hand Paint") AS "Hand Paint",
    "sum"("subquery"."Ajrakh") AS "Ajrakh",
    "sum"("subquery"."Bagru") AS "Bagru",
    "sum"("subquery"."Bhandej") AS "Bhandej",
    "sum"("subquery"."Kalamkari") AS "Kalamkari",
    "sum"("subquery"."Acid Paint") AS "Acid Paint",
    "sum"("subquery"."Digital") AS "Digital",
    "sum"("subquery"."Dabu") AS "Dabu",
    "sum"("subquery"."Discharge") AS "Discharge",
    "sum"("subquery"."Rapid") AS "Rapid",
    "sum"("subquery"."Pigment") AS "Pigment",
    "sum"("subquery"."Screen Blend") AS "Screen Blend"
   FROM ( SELECT "products"."product",
            0 AS "Shibori",
            0 AS "Pathaka",
            0 AS "Block Batik",
            0 AS "Pen Batik",
            0 AS "Acid Block Print",
            0 AS "Brush Acid",
            0 AS "Hand Paint",
            0 AS "Ajrakh",
            0 AS "Bagru",
            0 AS "Bhandej",
            0 AS "Kalamkari",
            0 AS "Acid Paint",
            0 AS "Digital",
            0 AS "Dabu",
            0 AS "Discharge",
            0 AS "Rapid",
            0 AS "Pigment",
            0 AS "Screen Blend"
           FROM "public"."products"
          GROUP BY "products"."product"
        UNION
         SELECT "dyetbl"."product",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = 'Shibori'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Shibori",
            "sum"(
                CASE
                    WHEN ("dyetbl"."dyetype" = 'Pathaka'::"text") THEN "dyetbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Pathaka",
            0 AS "Block Batik",
            0 AS "Pen Batik",
            0 AS "Acid Block Print",
            0 AS "Brush Acid",
            0 AS "Hand Paint",
            0 AS "Ajrakh",
            0 AS "Bagru",
            0 AS "Bhandej",
            0 AS "Kalamkari",
            0 AS "Acid Paint",
            0 AS "Digital",
            0 AS "Dabu",
            0 AS "Discharge",
            0 AS "Rapid",
            0 AS "Pigment",
            0 AS "Screen Blend"
           FROM "public"."dyetbl"
          GROUP BY "dyetbl"."product"
        UNION
         SELECT "jobworktbl"."product",
            0 AS "Shibori",
            0 AS "Pathaka",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Block Batik'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Block Batik",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Pen Batik'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Pen Batik",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Acid Block Print'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Acid Block Print",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Brush Acid'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Brush Acid",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Hand Paint'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Hand Paint",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Ajrakh'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Ajrakh",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Bagru'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Bagru",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Bhandej'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Bhandej",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Kalamkari'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Kalamkari",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Acid Paint'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Acid Paint",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Digital'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Digital",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Dabu'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Dabu",
            "sum"(
                CASE
                    WHEN (("jobworktbl"."printtype" = 'Discharge'::"text") AND ("jobworktbl"."movement" = 'In'::"text") AND ("jobworktbl"."rollingrequired" = true)) THEN "jobworktbl"."quantity"
                    ELSE 0
                END) AS "Discharge",
            0 AS "Rapid",
            0 AS "Pigment",
            0 AS "Screen Blend"
           FROM "public"."jobworktbl"
          GROUP BY "jobworktbl"."product"
        UNION
         SELECT "printtbl"."product",
            0 AS "Shibori",
            0 AS "Pathaka",
            0 AS "Block Batik",
            0 AS "Pen Batik",
            0 AS "Acid Block Print",
            0 AS "Brush Acid",
            0 AS "Hand Paint",
            0 AS "Ajrakh",
            0 AS "Bagru",
            0 AS "Bhandej",
            0 AS "Kalamkari",
            0 AS "Acid Paint",
            0 AS "Digital",
            0 AS "Dabu",
            0 AS "Discharge",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Rapid'::"text") AND ("printtbl"."rollingrequired" = true)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Rapid",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Pigment'::"text") AND ("printtbl"."rollingrequired" = true)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Pigment",
            "sum"(
                CASE
                    WHEN (("printtbl"."printtype" = 'Screen Blend'::"text") AND ("printtbl"."rollingrequired" = true)) THEN "printtbl"."quantity"
                    ELSE (0)::bigint
                END) AS "Screen Blend"
           FROM "public"."printtbl"
          GROUP BY "printtbl"."product"
        UNION
         SELECT "r"."product",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Shibori'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Shibori",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pathaka'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Pathaka",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Block Batik'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Block Batik",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pen Batik'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Pen Batik",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Acid Block Print'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Acid Block Print",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Brush Acid'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Brush Acid",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Hand Paint'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Hand Paint",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Ajrakh'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Ajrakh",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Bagru'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Bagru",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Bhandej'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Bhandej",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Kalamkari'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Kalamkari",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Acid Paint'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Acid Paint",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Digital'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Digital",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Dabu'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Dabu",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Discharge'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Discharge",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Rapid'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Rapid",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Pigment'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Pigment",
            (- "sum"(
                CASE
                    WHEN (("r"."printtype" = 'Screen Blend'::"text") AND ("r"."movement" = 'Out'::"text") AND ("r"."transaction" = 'Regular'::"text")) THEN "r"."quantity"
                    ELSE (0)::double precision
                END)) AS "Screen Blend"
           FROM "public"."rollingtbl" "r"
          GROUP BY "r"."product") "subquery"
  GROUP BY "subquery"."product";

ALTER TABLE "public"."stilltoroll_view" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subfabrictbl" (
    "subfabric" "text" NOT NULL,
    "fabric" "text" NOT NULL,
    "units" "text"
);

ALTER TABLE "public"."subfabrictbl" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."suppliertbl" (
    "supplier" "text" NOT NULL,
    "email" "text",
    "mobile" "text",
    "address" "text",
    "type" "text",
    "empaneldate" "text",
    "gstnumber" "text",
    "address_1" "text"
);

ALTER TABLE "public"."suppliertbl" OWNER TO "postgres";

ALTER TABLE "public"."whitestocktbl" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."whitestocktbl_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."componentstbl"
    ADD CONSTRAINT "components_pkey" PRIMARY KEY ("component");

ALTER TABLE ONLY "public"."cutstocktbl"
    ADD CONSTRAINT "cuttbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."dyechargestbl"
    ADD CONSTRAINT "dyechargestbl_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."dyechargestbl"
    ADD CONSTRAINT "dyechargestbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."dyestyletbl"
    ADD CONSTRAINT "dyestyletbl_pkey" PRIMARY KEY ("dyestyle");

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."dyetypestbl"
    ADD CONSTRAINT "dyetypestbl_pkey" PRIMARY KEY ("dyetype");

ALTER TABLE ONLY "public"."fabrictbl"
    ADD CONSTRAINT "fabric_pkey" PRIMARY KEY ("fabric");

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."printtypestbl"
    ADD CONSTRAINT "printtypestbl_pkey" PRIMARY KEY ("printtype");

ALTER TABLE ONLY "public"."productComponents"
    ADD CONSTRAINT "productComponents_pkey" PRIMARY KEY ("productComponent");

ALTER TABLE ONLY "public"."productComponents"
    ADD CONSTRAINT "productComponents_productComponent_key" UNIQUE ("productComponent");

ALTER TABLE ONLY "public"."products"
    ADD CONSTRAINT "products_pkey" PRIMARY KEY ("product");

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."subfabrictbl"
    ADD CONSTRAINT "subFabric_pkey" PRIMARY KEY ("subfabric");

ALTER TABLE ONLY "public"."suppliertbl"
    ADD CONSTRAINT "suppliertbl_pkey" PRIMARY KEY ("supplier");

ALTER TABLE ONLY "public"."whitestocktbl"
    ADD CONSTRAINT "whitestocktbl_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."componentstbl"
    ADD CONSTRAINT "componentstbl_component_fkey" FOREIGN KEY ("component") REFERENCES "public"."productComponents"("productComponent") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_dyestyle_fkey" FOREIGN KEY ("dyestyle") REFERENCES "public"."dyestyletbl"("dyestyle") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_dyetype_fkey" FOREIGN KEY ("dyetype") REFERENCES "public"."dyetypestbl"("dyetype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_fabric_fkey" FOREIGN KEY ("fabric") REFERENCES "public"."fabrictbl"("fabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_primarydyer_fkey" FOREIGN KEY ("primarydyer") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_product_fkey" FOREIGN KEY ("product") REFERENCES "public"."products"("product") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."dyetbl"
    ADD CONSTRAINT "dyetbl_secondarydyer_fkey" FOREIGN KEY ("secondarydyer") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_cargoprovider_fkey" FOREIGN KEY ("cargoprovider") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_dyetype_fkey" FOREIGN KEY ("dyetype") REFERENCES "public"."dyetypestbl"("dyetype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_fabric_fkey" FOREIGN KEY ("fabric") REFERENCES "public"."fabrictbl"("fabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_printtype_fkey" FOREIGN KEY ("printtype") REFERENCES "public"."printtypestbl"("printtype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_product_fkey" FOREIGN KEY ("product") REFERENCES "public"."products"("product") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."jobworktbl"
    ADD CONSTRAINT "jobworktbl_supplier_fkey" FOREIGN KEY ("supplier") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_dyetype_fkey" FOREIGN KEY ("dyetype") REFERENCES "public"."dyetypestbl"("dyetype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_fabric_fkey" FOREIGN KEY ("fabric") REFERENCES "public"."fabrictbl"("fabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_mainprinter_fkey" FOREIGN KEY ("mainprinter") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_printtype_fkey" FOREIGN KEY ("printtype") REFERENCES "public"."printtypestbl"("printtype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_product_fkey" FOREIGN KEY ("product") REFERENCES "public"."products"("product") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."printtbl"
    ADD CONSTRAINT "printtbl_secprinter_fkey" FOREIGN KEY ("secprinter") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_fabric_fkey" FOREIGN KEY ("fabric") REFERENCES "public"."fabrictbl"("fabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_printtype_fkey" FOREIGN KEY ("printtype") REFERENCES "public"."printtypestbl"("printtype") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_product_fkey" FOREIGN KEY ("product") REFERENCES "public"."products"("product");

ALTER TABLE ONLY "public"."rollingtbl"
    ADD CONSTRAINT "rollingtbl_supplier_fkey" FOREIGN KEY ("supplier") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."whitestocktbl"
    ADD CONSTRAINT "whitestocktbl_fabric_fkey" FOREIGN KEY ("fabric") REFERENCES "public"."fabrictbl"("fabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."whitestocktbl"
    ADD CONSTRAINT "whitestocktbl_subfabric_fkey" FOREIGN KEY ("subfabric") REFERENCES "public"."subfabrictbl"("subfabric") ON UPDATE CASCADE;

ALTER TABLE ONLY "public"."whitestocktbl"
    ADD CONSTRAINT "whitestocktbl_supplier_fkey" FOREIGN KEY ("supplier") REFERENCES "public"."suppliertbl"("supplier") ON UPDATE CASCADE;

ALTER TABLE "public"."dyechargestbl" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_fabric_view"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_fabric_view"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_fabric_view"() TO "service_role";

GRANT ALL ON FUNCTION "public"."f1"() TO "anon";
GRANT ALL ON FUNCTION "public"."f1"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."f1"() TO "service_role";

GRANT ALL ON FUNCTION "public"."f2"() TO "anon";
GRANT ALL ON FUNCTION "public"."f2"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."f2"() TO "service_role";

GRANT ALL ON FUNCTION "public"."meters"() TO "anon";
GRANT ALL ON FUNCTION "public"."meters"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."meters"() TO "service_role";

GRANT ALL ON FUNCTION "public"."pieces"() TO "anon";
GRANT ALL ON FUNCTION "public"."pieces"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."pieces"() TO "service_role";

GRANT ALL ON FUNCTION "public"."update_fabric_quantity"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_fabric_quantity"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_fabric_quantity"() TO "service_role";

GRANT ALL ON FUNCTION "public"."whiteasmeters_f"() TO "anon";
GRANT ALL ON FUNCTION "public"."whiteasmeters_f"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."whiteasmeters_f"() TO "service_role";

GRANT ALL ON TABLE "public"."componentstbl" TO "anon";
GRANT ALL ON TABLE "public"."componentstbl" TO "authenticated";
GRANT ALL ON TABLE "public"."componentstbl" TO "service_role";

GRANT ALL ON TABLE "public"."cutstocktbl" TO "anon";
GRANT ALL ON TABLE "public"."cutstocktbl" TO "authenticated";
GRANT ALL ON TABLE "public"."cutstocktbl" TO "service_role";

GRANT ALL ON SEQUENCE "public"."cuttbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."cuttbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."cuttbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."dyechargestbl" TO "anon";
GRANT ALL ON TABLE "public"."dyechargestbl" TO "authenticated";
GRANT ALL ON TABLE "public"."dyechargestbl" TO "service_role";

GRANT ALL ON TABLE "public"."dyetbl" TO "anon";
GRANT ALL ON TABLE "public"."dyetbl" TO "authenticated";
GRANT ALL ON TABLE "public"."dyetbl" TO "service_role";

GRANT ALL ON TABLE "public"."dyecharges_view" TO "anon";
GRANT ALL ON TABLE "public"."dyecharges_view" TO "authenticated";
GRANT ALL ON TABLE "public"."dyecharges_view" TO "service_role";

GRANT ALL ON SEQUENCE "public"."dyechargestbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dyechargestbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dyechargestbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."dyestyletbl" TO "anon";
GRANT ALL ON TABLE "public"."dyestyletbl" TO "authenticated";
GRANT ALL ON TABLE "public"."dyestyletbl" TO "service_role";

GRANT ALL ON SEQUENCE "public"."dyetbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dyetbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dyetbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."dyetypestbl" TO "anon";
GRANT ALL ON TABLE "public"."dyetypestbl" TO "authenticated";
GRANT ALL ON TABLE "public"."dyetypestbl" TO "service_role";

GRANT ALL ON TABLE "public"."fabrictbl" TO "anon";
GRANT ALL ON TABLE "public"."fabrictbl" TO "authenticated";
GRANT ALL ON TABLE "public"."fabrictbl" TO "service_role";

GRANT ALL ON TABLE "public"."jobworktbl" TO "anon";
GRANT ALL ON TABLE "public"."jobworktbl" TO "authenticated";
GRANT ALL ON TABLE "public"."jobworktbl" TO "service_role";

GRANT ALL ON SEQUENCE "public"."jobworktbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."jobworktbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."jobworktbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."printtbl" TO "anon";
GRANT ALL ON TABLE "public"."printtbl" TO "authenticated";
GRANT ALL ON TABLE "public"."printtbl" TO "service_role";

GRANT ALL ON SEQUENCE "public"."printtbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."printtbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."printtbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."printtypestbl" TO "anon";
GRANT ALL ON TABLE "public"."printtypestbl" TO "authenticated";
GRANT ALL ON TABLE "public"."printtypestbl" TO "service_role";

GRANT ALL ON TABLE "public"."productComponents" TO "anon";
GRANT ALL ON TABLE "public"."productComponents" TO "authenticated";
GRANT ALL ON TABLE "public"."productComponents" TO "service_role";

GRANT ALL ON TABLE "public"."products" TO "anon";
GRANT ALL ON TABLE "public"."products" TO "authenticated";
GRANT ALL ON TABLE "public"."products" TO "service_role";

GRANT ALL ON TABLE "public"."rollingtbl" TO "anon";
GRANT ALL ON TABLE "public"."rollingtbl" TO "authenticated";
GRANT ALL ON TABLE "public"."rollingtbl" TO "service_role";

GRANT ALL ON TABLE "public"."readystock_view" TO "anon";
GRANT ALL ON TABLE "public"."readystock_view" TO "authenticated";
GRANT ALL ON TABLE "public"."readystock_view" TO "service_role";

GRANT ALL ON SEQUENCE "public"."rollingtbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."rollingtbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."rollingtbl_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."screenblendtoprint_view" TO "anon";
GRANT ALL ON TABLE "public"."screenblendtoprint_view" TO "authenticated";
GRANT ALL ON TABLE "public"."screenblendtoprint_view" TO "service_role";

GRANT ALL ON TABLE "public"."stillinjbbysupplier_view" TO "anon";
GRANT ALL ON TABLE "public"."stillinjbbysupplier_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stillinjbbysupplier_view" TO "service_role";

GRANT ALL ON TABLE "public"."stillinroll_view" TO "anon";
GRANT ALL ON TABLE "public"."stillinroll_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stillinroll_view" TO "service_role";

GRANT ALL ON TABLE "public"."whitestocktbl" TO "anon";
GRANT ALL ON TABLE "public"."whitestocktbl" TO "authenticated";
GRANT ALL ON TABLE "public"."whitestocktbl" TO "service_role";

GRANT ALL ON TABLE "public"."stilltocut_view" TO "anon";
GRANT ALL ON TABLE "public"."stilltocut_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stilltocut_view" TO "service_role";

GRANT ALL ON TABLE "public"."stilltodye_view" TO "anon";
GRANT ALL ON TABLE "public"."stilltodye_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stilltodye_view" TO "service_role";

GRANT ALL ON TABLE "public"."stilltoprint_view" TO "anon";
GRANT ALL ON TABLE "public"."stilltoprint_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stilltoprint_view" TO "service_role";

GRANT ALL ON TABLE "public"."stilltoroll_view" TO "anon";
GRANT ALL ON TABLE "public"."stilltoroll_view" TO "authenticated";
GRANT ALL ON TABLE "public"."stilltoroll_view" TO "service_role";

GRANT ALL ON TABLE "public"."subfabrictbl" TO "anon";
GRANT ALL ON TABLE "public"."subfabrictbl" TO "authenticated";
GRANT ALL ON TABLE "public"."subfabrictbl" TO "service_role";

GRANT ALL ON TABLE "public"."suppliertbl" TO "anon";
GRANT ALL ON TABLE "public"."suppliertbl" TO "authenticated";
GRANT ALL ON TABLE "public"."suppliertbl" TO "service_role";

GRANT ALL ON SEQUENCE "public"."whitestocktbl_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."whitestocktbl_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."whitestocktbl_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
